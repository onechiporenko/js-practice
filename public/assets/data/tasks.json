{
  "tasks": [
    {
      "id": 1,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает объект с полями, равными каждому символу в этой строке. Значениями полей являются количества вхождения каждого символа в строку. Пример: для строки <kbd>abca</kbd> функция должна вернуть объект <kbd>{a: 2, b: 1, c: 1}</kbd>.",
      "method": "str2obj"
    },
    {
      "id": 2,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и проверяет, является ли одна палиндромом (возвращает <kbd>true</kbd>, если строка палиндром, <kbd>false</kbd> - если нет).",
      "method": "isPalindrome"
    },
    {
      "id": 3,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает ее копию с вырезанными всеми пробельными символами (\\n, \\t, \\r, ' ').",
      "method": "superTrim"
    },
    {
      "id": 4,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает кол-во уникальных символов в ней. Пример: строка <kbd>abca</kbd>, функция вернет 3.",
      "method": "getUniqueCharsNumber"
    },
    {
      "id": 5,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает строку, состоящую из символов, которые стоят на четных позициях строки-аргумента. Пример: строка <kbd>abcdef</kbd>, функция вернет <kbd>bdf</kbd>.",
      "method": "getEvenChars"
    },
    {
      "id": 6,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает сумму кодов ее символов. В условии данной задачи аргументом может быть строка только из ascii-символов.",
      "method": "getAsciiCodesSum"
    },
    {
      "id": 7,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает ее копию, отсортированную по возрастанию ascii-кодов ее символов. В условии данной задачи аргументов может быть строка только из ascii-символов. Пример: строка <kbd>dacbef</kbd>, функция вернет <kbd>abcdef</kbd>.",
      "method": "sortByAsciiCode"
    },
    {
      "id": 8,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строки), которые являются путями к файлам в файловой системе, и возвращает их общую часть. Пример: строка1 - <kbd>/path1/path2/path4.txt</kbd>, строка2 - <kbd>/path1/path2/path3.txt</kbd>, функция вернет <kbd>/path1/path2/</kbd>. В условии данной задачи у файла может быть только имя без расширения (<kbd>abc</kbd>), а может быть расширение, но без имени (<kbd>.htaccess</kbd>).",
      "method": "getCommonPath"
    },
    {
      "id": 9,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку), которая является url и возвращает число, которое отвечает тому, домен какого уровня содержиться в url. Пример: url - <kbd>http://google.com/</kbd>, функция вернет <kbd>2</kbd>. В условии данной задачи url может не содержать закрывающую косую черту, может заканчиваться на точку (должна быть проигнорирована), в качестве протокола может быть http/https.",
      "method": "getDomainLevel"
    },
    {
      "id": 10,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку), которая является номером телефона (любой наш моб. номер) и возвращает объект вида с частями этого номера. Пример: номер - <kbd>+380661234567</kbd>, функция вернет <kbd>{c: '+38', o: '066', p: '1234567'}</kbd>. В условии данной задачи необходимо учесть, что номер может содержать пробельные символы (это не только один пробел), скобки и знак минус.",
      "method": "parsePhone"
    },
    {
      "id": 11,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строку и число) и возвращает массив из частей строки размера, равного второму параметру функции. Если длина строки меньше, чем размер части, то вернуть массив из одного элемента (равному всей строке). Если длина строки не кратна размеру части, то последний элемент массива должен содержать остаток строки. Пример: строка <kbd>abcab</kbd>, число 2, функция вернет <kbd>['ab', 'ca', 'b']</kbd>.",
      "method": "getChunks"
    },
    {
      "id": 12,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и возвращает ее копию, записанную в обратном порядке. В условии данной задачи строка-аргумент может состоять только из ascii-символов.",
      "method": "getReversed"
    },
    {
      "id": 13,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строки) и возвращает количество вхождений второго аргумента в первый. Пример: строка1 - <kbd>abcabc</kbd>, строка2 - <kbd>ab</kbd>, функция вернет 2. Если один из аргументов 0, функция возвращает 0.",
      "method": "getEntriesCount"
    },
    {
      "id": 14,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строки) и проверяет, начинается ли первый аргумент со второго (возвращает <kbd>true</kbd>, если начинается, <kbd>false</kbd> - иначе). Если один из агрументов пустая строка, функция возвращает <kbd>false</kbd>.",
      "method": "startWith"
    },
    {
      "id": 15,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строки) и проверяет, являются ли они равными, если не учитывать их регистр (возвращает <kbd>true</kbd>, если равны, <kbd>false</kbd> - иначе). В условии данной задачи строки-аргументы могут состоять только из ascii-символов. Пример: строка1 - <kbd>aBcDeF</kbd>, строка2 - <kbd>AbCdEf</kbd>, функция вернет <kbd>true</kbd>.",
      "method": "isEqualIgnoreCase"
    },
    {
      "id": 16,
      "chapter": "strings",
      "description": "Функция принимает один аргумент (строку) и проверяет, что она является однострочной (возвращает <kbd>true</kbd>, если является, <kbd>false</kbd> - иначе).",
      "method": "isSingleLine"
    },
    {
      "id": 17,
      "chapter": "strings",
      "description": "Функция принимает два аргумента (строки), которые являются доменами (без протокола, пути, параметров и т.д), и возвращает их общую часть. Пример: строка1 - <kbd>adds.google.com</kbd>, строка2 - <kbd>maps.google.com</kbd>, функция возвращает <kbd>google.com</kbd>.",
      "method": "getCommonDomain"
    },
    {
      "id": 18,
      "chapter": "strings",
      "description": "Функция принимает три параметра (строка, строка, число) и возвращает копию первой строки, в которую после символа на позиции, равной третьему параметру, вставляется вторая строка. Пример: строка1 - <kbd>abcfg</kbd>, строка2 - <kbd>de</kbd>, число - <kbd>3</kbd>, функция вернет <kbd>abcdefg</kbd>.",
      "method": "smartInsert"
    },
    {
      "id": 19,
      "chapter": "strings",
      "description": "Функция принимает любое кол-во аргументов (строк) и возвращает самую длинную из них. Если аргументов передано не было, то возвращает <kbd>null</kbd>. Если у нескольких строк одинаковая длина и она максимальная, то вернуть последнюю из них.",
      "method": "getLongest"
    },
    {
      "id": 20,
      "chapter": "strings",
      "description": "Функция принимает два параметра (строки) и возвращает строку, которая состоит из четных символов первого аргумента и нечетных символов второго аргумента, идущие один за другим. Если аргументы разной длины, то нужные символы более длинной строки дописываются в строку-результат. Пример: строка1 - <kbd>abcde</kbd>, строка2 - <kbd>1234567</kbd>, функция вернет <kbd>b1d357</kbd>.",
      "method": "smartConcat"
    },
    {
      "id": 21,
      "chapter": "objects",
      "description": "Функция принимает два параметра (объект и массив строк) и возвращает новый объект, состоящий из полей, перечисленных в массиве. Если в исходном объекте нет поля с именем, которое есть в массиве, то оно игнорируется. Пример: объект - <kbd>{a: 1, b: 2, c: 3, d: 4}</kbd>, массив - <kbd>['a', 'b', 'e']</kbd>, функция вернет - <kbd>{a: 1, b: 2}</kbd>.",
      "method": "getCustomProperties"
    },
    {
      "id": 22,
      "chapter": "objects",
      "description": "Функция принимает два параметра (объекты) и возвращает массив, состоящий из полей, которые есть в обоих параметрах. Пример: объект1 - <kbd>{a: 1, b: 2, c: 3, d: 4}</kbd>, объект2 - <kbd>{a: 4, c: 2, e: 7}</kbd>, функция вернет - <kbd>['a', 'c']</kbd>.",
      "method": "getCommonKeys"
    },
    {
      "id": 23,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (вектор чисел) и возвращает их сумму. Если массив пустой, то возвращает <kbd>null</kbd>.",
      "method": "getSum"
    },
    {
      "id": 24,
      "chapter": "arrays",
      "description": "Функция приминает один параметр (вектор строк) и возвращает их конкатенацию. Если массив пустой, то возвращает <kbd>''</kbd>.",
      "method": "getConcat"
    },
    {
      "id": 25,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (вектор) и возвращает другой массив, состоящий из элементов первого массива, стоящих на четных позициях массива-аргумента.",
      "method": "getEvenElements"
    },
    {
      "id": 26,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрицу N*N) и возвращает вектор длинной N, состоящий их элементов матрицы, стоящих на главной диагонали.",
      "method": "getMainDiagonal"
    },
    {
      "id": 27,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрицу N*N) и возвращает вектор длинной N, состоящий их элементов матрицы, стоящих на побочной диагонали.",
      "method": "getSecondaryDiagonal"
    },
    {
      "id": 28,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрицу N*M) и возвращает матрицу, состоящую из четных строк исходной.",
      "method": "getEvenLines"
    },
    {
      "id": 29,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрицу N*M) и возвращает матрицу, состоящую из нечетных столбцов исходной.",
      "method": "getOddColumns"
    },
    {
      "id": 30,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (вектор чисел) и возвращает индекс последнего максимального из них. Если массив пустой, вернуть <kbd>-1</kbd>.",
      "method": "getIndexOfMax"
    },
    {
      "id": 31,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (вектор) и возвращает новый массив, состоящий из элементов исходного массива стоящих на четных позициях, но взятых в обратном порядке. Пример: вектор - <kbd>[1,2,3,4,5,6,7]</kbd>, функция вернет - <kbd>[6,4,2]</kbd>.",
      "method": "getEvenIndexedElementReversed"
    },
    {
      "id": 32,
      "chapter": "arrays",
      "description": "Функция принимает два параметра (вектор строк, строка) и возвращает новый массив из элементов исходного, у которых есть подстрока, равная второму параметру функции.",
      "method": "getWithSubstr"
    },
    {
      "id": 33,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрица чисел N*N, N - четное) и возвращает новую матрицу размером N/2 * N и состоящую по четным строчкам из четных элементов, а по не четным строчкам из нечетных элементов исходной матрицы. Пример: матрица - <kbd>[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]</kbd>, функция вернет - <kbd>[[1,3],[6,8],[9,11],[14,16]]</kbd>.",
      "method": "getOddEvenElements"
    },
    {
      "id": 34,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрица чисел N*M) и возвращает вектор, который состоит из всех элементов матрицы, если ее обходить змейкой, начиная с [0,0]. Пример: матрица - <kbd>[[1,2,3],[4,5,6],[7,8,9]]</kbd>, функция вернет - <kbd>[1,2,3,6,5,4,7,8,9]</kbd>.",
      "method": "getSnake00"
    },
    {
      "id": 35,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрица чисел N*M) и возвращает вектор, который состоит из всех элементов матрицы, если ее обходить змейкой, начиная с [N,M]. Пример: матрица - <kbd>[[1,2,3],[4,5,6],[7,8,9]]</kbd>, функция вернет - <kbd>[9,8,7,4,5,6,3,2,1]</kbd>.",
      "method": "getSnakeNM"
    },
    {
      "id": 36,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрица чисел N*M) и возвращает вектор, который состоит из всех элементов матрицы, если ее обходить змейкой, начиная с [0,M]. Пример: матрица - <kbd>[[1,2,3],[4,5,6],[7,8,9]]</kbd>, функция вернет - <kbd>[3,2,1,4,5,6,9,8,7]</kbd>.",
      "method": "getSnake0M"
    },
    {
      "id": 37,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (матрица чисел N*M) и возвращает вектор, который состоит из всех элементов матрицы, если ее обходить змейкой, начиная с [0,M]. Пример: матрица - <kbd>[[1,2,3],[4,5,6],[7,8,9]]</kbd>, функция вернет - <kbd>[7,8,9,6,5,4,1,2,3]</kbd>.",
      "method": "getSnakeN0"
    },
    {
      "id": 38,
      "chapter": "arrays",
      "description": "Функция принимает два параметра (векторы с числами) и возвращает вектор, элементы которого - суммы соответствующих элементов векторов-параметров. Пример: вектор1 - <kbd>[1,2,3]</kbd>, вектор2 - <kbd>[1,2,3,5]</kbd>, функция вернет - <kbd>[2,4,6,5]</kbd>.",
      "method": "getVectorsSum"
    },
    {
      "id": 39,
      "chapter": "arrays",
      "description": "Функция принимает два параметра (векторы с числами) и возвращает вектор, элементы которого - суммы соответствующих элементов векторов-параметров. Если длина массивов разная, то суммирование продолжается с начала короткого массива. Пример: вектор1 - <kbd>[1,1,1,1,1,1,1]</kbd>, вектор2 - <kbd>[1,2,3]</kbd>, функция вернет - <kbd>[2,3,4,2,3,4,2]</kbd>.",
      "method": "getVectorsSum2"
    },
    {
      "id": 40,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (вектор размера N^2, где N - натуральное число) и возвращает матрицу N*N. Пример: вектор - <kbd>[1,2,3,4,5,6,7,8,9]</kbd>, функция вернет - <kbd>[[1,2,3],[4,5,6],[7,8,9]]</kbd>.",
      "method": "vector2matrix"
    },
    {
      "id": 41,
      "chapter": "ajax",
      "description": "Функция принимает один параметр (объект) и отправляет его методом <kbd>POST</kbd> по ссылке <kbd>/tests/myscript</kbd>.",
      "method": "sendPostData"
    },
    {
      "id": 42,
      "chapter": "numbers",
      "description": "Функция принимает любое количество параметров (чисел) и возвращает самое большое из них (<kbd>Math.max</kbd> использовать нельзя). Если агрументов не передано, функция должна вернуть <kbd>null</kbd>.",
      "method": "getMax"
    },
    {
      "id": 43,
      "chapter": "numbers",
      "description": "Функция принимает два параметра (любое положительное число и любое натуральное число) и возвращает корень первого параметра степени второго параметра. Пример: число1 - <kbd>125</kbd>, число2 - <kbd>3</kbd>, функция вернет - <kbd>5</kbd>.",
      "method": "getCustomRoot"
    },
    {
      "id": 44,
      "chapter": "objects",
      "description": "Функция принимает два параметра (объект и строку). Строка является собой запись вида <kbd>a.b.c</kbd> (пустой быть не может), а объект в качестве полей может содержать другие объекты (вложенность произвольная). Функция возвращает значение поля объекта по пути, равному второму параметру функции (<kbd>.</kbd> является разделителем между вложенными объектами). Если такого пути нет, функция должна вернуть <kbd>null</kbd>. Пример: объект - <kbd>{a: {b: {c: 123'}}}</kbd>, строка - <kbd>'a.b.c'</kbd>, функция вернет - <kbd>123</kbd>.",
      "method": "getCustomPath"
    },
    {
      "id": 45,
      "chapter": "objects",
      "description": "Функция принимает один параметр (объект) и возвращает новый объект, ключами которого являются значения из первого объекта, а значениями - ключи из первого объекта. Пример: объект - <kbd>{a: 123, b: 2, c: 123}</kbd>, функция вернет - <kbd>{'123': 'a', '2': 'b'}</kbd>. Обратить внимание, что совпадающие значения должны перезатираться самым последним ключом.",
      "method": "invertObject"
    },
    {
      "id": 46,
      "chapter": "objects",
      "description": "Функция принимает один параметр (объект) и возвращает новый объект, ключами которого являются значения из первого объекта, а значениями - ключи из первого объекта. Пример: объект - <kbd>{a: 123, b: 2, c: 123}</kbd>, функция вернет - <kbd>{'123': ['a', 'c'], '2': 'b'}</kbd>. Обратить внимание, что совпадающие значения не должны перезатираться (ключи записываются в массив).",
      "method": "invertObjectWithoutOverride"
    },
    {
      "id": 47,
      "chapter": "objects",
      "description": "Функция принимает один параметр (объект) и возвращает массив с именами методов, которые есть у этого объекта. Пример: объект - <kbd>{a: 1, b: function() {}, c: 'abc', d: function () {} }</kbd>, функция вернет - <kbd>['b', 'd']</kbd>.",
      "method": "getFunctionNames"
    },
    {
      "id": 48,
      "chapter": "objects",
      "description": "Функция принимает один параметр (объект). В зависимости от его типа возвращает следующее: строка - string, число - number, логическое значение - boolean, массив - array, объект - object (для объекта-даты - date, для объекта-ошибки - error), функция - function, null - null, ничего - undefined, RegExp - regexp.",
      "method": "smartGetType"
    },
    {
      "id": 49,
      "chapter": "objects",
      "description": "Функция принимает один параметр (объект) и возвращает количество его собственных полей.",
      "method": "getOwnPropertiesCount"
    },
    {
      "id": 50,
      "chapter": "objects",
      "description": "Функция принимает произвольное кол-во параметров (объекты) и возвращает имена полей, которые есть у каждого объекта.",
      "method": "getCommonKeys2"
    },
    {
      "id": 51,
      "chapter": "objects",
      "description": "Функция принимает один параметр (любой тип) и возвращает <kbd>true</kbd>, если он <kbd>null</kbd> или <kbd>undefined</kbd>.",
      "method": "checkIsNone"
    },
    {
      "id": 52,
      "chapter": "numbers",
      "description": "Функция принимает два параметра (любое рациональное число и любое натуральное число) и возвращает целое число, которое ближе всего к первому параметру и кратно второму.",
      "method": "getNearestNumber"
    },
    {
      "id": 53,
      "chapter": "numbers",
      "description": "Функция принимает три параметра (числа) и возвращает <kbd>true</kbd>, если первый параметр попадает в диапазон между вторым и третьим (сравнение не строгое), иначе возвращает <kbd>false</kbd>.",
      "method": "checkInRange"
    },
    {
      "id": 54,
      "chapter": "numbers",
      "description": "Функция принимает один параметр (строку), который является IP-адресом и возвращает его числовой эквивалент.",
      "method": "ip2int"
    },
    {
      "id": 55,
      "chapter": "numbers",
      "description": "Функция принимает один параметр (число в диапазоне 0..4294967295) и возвращает его в формате IP-адреса.",
      "method": "int2ip"
    },
    {
      "id": 56,
      "chapter": "numbers",
      "description": "Функция принимает два параметра (строки с IP-адресами) и возвращает массив IP-адресов, которые находятся между ними (включая граничные адреса).",
      "method": "generateIpsRange"
    },
    {
      "id": 57,
      "chapter": "arrays",
      "description": "Функция принимает один параметр (любого типа) и, если он массив, то возвращает его без изменений, иначе - \"оборачивает\" его в массив. Пример1: параметр - <kbd>1234</kbd>, функция вернет - <kbd>[1234]</kbd>. Пример2: параметр - <kbd>[1234]</kbd>, функция вернет - <kbd>[1234]</kbd>.",
      "method": "makeArray"
    },
    {
      "id": 58,
      "chapter": "numbers",
      "description": "Функция принимает 4 параметра (числа), которые являются парами координат точек <kbd>x1, y1, x2, y2</kbd>, и вычисляет расстояние между этими точками.",
      "method": "getLine"
    },
    {
      "id": 59,
      "chapter": "numbers",
      "description": "Функция принимает 2 параметра (числа, которые являются степенями 2) и возвращает модуль разности этих степеней. Пример: число1 - <kbd>64</kbd>, число2 - <kbd>1024</kbd>, функция вернет <kbd>4</kbd>.",
      "method": "getSizeDiff"
    },
    {
      "id": 60,
      "chapter": "numbers",
      "description": "Функция принимает 1 параметр (число) и возвращает <kbd>true</kbd>, если оно простое, <kbd>false</kbd> - иначе.",
      "method": "checkIsPrime"
    },
    {
      "id": 61,
      "chapter": "numbers",
      "description": "Функция принимает 2 параметра (целые числа) и возвращает <kbd>true</kbd>, если первое является какой-то степенью второго числа, <kbd>false</kbd> - иначе.",
      "method": "checkPow"
    },
    {
      "id": 62,
      "chapter": "numbers",
      "description": "Функция принимает 1 параметр (число - кол-во байт) и возвращает максимально возможную единицу измерения для этого числа (но не больше PB). Точность - два знака после запятой. Пример: число - <kbd>10000</kbd>, функция вернет - <kbd>9.76 KB</kbd>.",
      "method": "getMaxSize"
    },
    {
      "id": 63,
      "chapter": "numbers",
      "description": "Функция принимает 3 параметра (натуральные числа) и возвращает <kbd>true</kbd>, если треугольник с такими сторонами является прямоугольным, <kbd>false</kbd> - иначе.",
      "method": "checkTriangle"
    },
    {
      "id": 64,
      "chapter": "numbers",
      "description": "Функция принимает 3 параметра (числа) и проверяет, входит ли точка с координатами, равными первым двум параметрам в круг с радиусом, равным третьему параметру, и центром в начале координат.",
      "method": "checkDotInCircle"
    },
    {
      "id": 65,
      "chapter": "numbers",
      "description": "Функция принимает 1 параметр (натуральное число больше 100) и возвращает <kbd>true</kbd>, если все его цифры разные, <kbd>false</kbd> - иначе.",
      "method": "checkAllDigitsUnique"
    },
    {
      "id": 66,
      "chapter": "arguments",
      "description": "Функция может принимать любое кол-во параметров (в описании функции не должно быть объявлено никаких параметров) и возвращает <kbd>true</kbd>, если передано больше трех параметров, <kbd>false</kbd> - иначе.",
      "method": "checkParametersCount"
    },
    {
      "id": 67,
      "chapter": "arguments",
      "description": "Функция может принимать любое кол-во параметров (в описании функции не должно быть объявлено никаких параметров). Если вторым параметром ей передана другая функция, то необходимо выполнить ее.",
      "method": "execSecondParameter"
    },
    {
      "id": 68,
      "chapter": "arguments",
      "description": "Функция может принимать любое кол-во параметров (в описании функции не должно быть объявлено никаких параметров). Если первым параметром передано имя функции, которая есть у объекта <kbd>Math</kbd>, ее необходимо выполнить, передав в качестве параметров оставшиеся аргументы функции.",
      "method": "callIfExists"
    }
  ]
}